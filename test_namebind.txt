// TODO:

struct Car {
    engine: int,
    wheel: int,
    engine: int, // ERROR: redefinition.*'engine'
    name: string,
}

func front_func(a: int, b: int, c: int) -> int {
    a + b
    c + d // ERROR: undeclared identifier 'd'
}

func f() -> int {
}

func main() {
    let a: int = 3 + 4
    let a = 4 // ERROR: redefinition.*'a'

    // assignability check
    1 = 3 // ERROR: not assignable
    f() = 3 // ERROR: not assignable

    new_kid // ERROR: undeclared.*'new_kid'

    let car: Car
    car(3) // ERROR: 'car'.*not a function
    front_func(1 + 2) // ERROR: 'front_func' accepts 3 arguments, got 1
    back_func(a, a) // ERROR: undeclared function 'back_func'
    // TODO: multi-pass name binding

    {
        // declaration in a block
        let in_block = 0
        in_block
    }
    in_block // ERROR: undeclared.*'in_block'

    if a {
        let in_if = 42
        in_if
    } else if a {
        in_if // ERROR: undeclared.*'in_if'
    } else {
    }
    in_if // ERROR: undeclared.*'in_if'
}

func back_func(a: int, b: int) {
    return a + b
}
