// TODO:
// for
// arrays []T

func main() {
    let a = 3 + 4
    let b: int
    var b: int = 3 + 4
    let c *int // ERROR: expected.*':'.*found '\*'
    let c: int blah // ERROR: expected '\\n'.*'blah'
    let car: & // ERROR: expected type expression
    let car: var & // ERROR: expected type name
    let car: var &Car
    let car: var var var &Car // ERROR: expected '\\n', found 'var'
    let car: &var Car // TODO: disallow this
    let car: var &Car Sedan // ERROR: expected '\\n', found 'Sedan'

    // TODO: Currently there are two ways to declare mutable reference
    // variables: 'var x = &Ty' and 'let x = var &Ty'.  Preferably,
    // only the first one should be allowed syntactically.
    var car: &Car

    // var &Car vs. &(var Car) ??
    // &Vec(var &Car) ??
    // : immutable vector whose elements' addresses are stable, but

    let str = "hello there"

    1 * 2 + 3 + 4 * 5
    3 + (a - (b + a * 3)) * 2

    b a // ERROR: expected '='
    b = a
    c = &b

    // pointers and derefs
    let p: &int

    f(3, 4)
    f(3, 4,)
    f(3, 4, ,) // ERROR: expected.*expression
    f(3, 4, 2 + 5)
    
    car.wheel
    car.driver.age

    {
        // blocked statement
    }

    if a {
    } else if a {
    } else a { // ERROR: expected.*'\{'
        stray_stmt
    }

    // builtins
    #printf()
}

func f(a: int) int { // ERROR: expected '->'.*found 'int'
}

func f(a: int, b int, c: &int) -> int { // ERROR: expected .* ':'
    return * // ERROR: expected expression
}

func f(a: int#, b: int, c: &int) -> int { // ERROR: trailing token '#'
}

struct Token {
  pos: int
  a: int
}

struct { // ERROR: expected an identifier
}

struct Car // ERROR: expected '\{'
    a: i64,
    b: int
    c: int, // ERROR: unterminated struct
