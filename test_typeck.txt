// TODO:

struct Car {
    engine: int,
    wheel: int,
    gear: &int,
}

func void_ret() {
    return 1 // ERROR: function .* should not return
}

func f() -> Car {
    return 0 // ERROR: return type mismatch
    if 1 {
      0
    } else if 2 {
      0
      1
    }
}

func g() -> int {
    return 98
}

func h(a: int, b: &int) -> int {
    return 1
}

func main() {
    // var decl and assignment
    var s: string
    s = "hi"
    var car: Car
    car = 3 // ERROR: cannot assign 'int'.*'Car'
    var immut = 4
    immut = "nope" // ERROR: cannot assign .* to 'int'

    // member access
    3.engine // ERROR: 'int'.*not a struct
    car.wing // ERROR: 'wing'.*not.*member.*'Car'
    car.engine

    car.engine = car // ERROR: cannot assign 'Car'.*'int'
    let _ = *(car.gear)

    // immutability check
    let c_imm: Car
    c_imm = car // ERROR: 'c_imm' is not declared as mutable
    c_imm.wheel = 3 // ERROR: 'c_imm' is not declared as mutable
    *(c_imm.gear) = 4 // ERROR: cannot assign .* immutable reference
    var c1: Car
    c1.wheel = 3

    // binary expressions
    (3 + car) // ERROR: incompatible.*binary.*'int'.*'Car'
    (3 + car).wheel // ERROR: incompatible.*binary.*'int'.*'Car'
    (car).wheel

    // function calls
    car = f()
    var i: int
    i = f() // ERROR: cannot assign 'Car'.*'int'
    f() + g() // ERROR: incompatible.*binary.*'Car'.*'int'
    f().engine
    f().engine = 3 // ERROR: cannot assign .* rvalue
    f().wing // ERROR: 'wing'.*not.*member.*'Car'
    h(3, 4) // ERROR: argument type mismatch
    void_ret()
    i = void_ret() // ERROR: cannot assign 'void' .* 'int'
    
    // paren expr
    (f()).engine
    i = 3 + 4

    // ref and deref
    {
        *i // ERROR: dereference.*'int'
        &24 // ERROR: take address of an rvalue
        &g() // ERROR: take address of an rvalue

        // mutable reference of an immutable variable
        let ii = 4
        let v = var &ii // ERROR: cannot borrow 'ii' as mutable .* declared immutable
        struct Val {
            a: int
        }
        let val = Val {.a = 3}
        let p = var &val.a // ERROR: cannot borrow 'val.a' as mutable because 'val' is declared immutable

        var imm_ptr: &int
        imm_ptr = var &i
        *imm_ptr = 3 // ERROR: cannot assign .* immutable reference
        *(imm_ptr) = 3 // ERROR: cannot assign .* immutable reference
        *imm_ptr = car // ERROR: cannot assign .* immutable reference
        imm_ptr = &i
        let mut_ptr: var &int
        *mut_ptr = 3
        mut_ptr = i // ERROR: 'mut_ptr' is not declared as mutable
    }

    let pcar: &Car
    (*pcar).wheel
    *(pcar.wheel) // ERROR: '&Car' is not a struct

    // other constructs that skip typeck
    #printf("hello, world\n")
}

struct NonCopy {
    a: var &int,
}

func copyable() {
    var i = 42
    let nc1 = NonCopy {.a = var &i}
    var nc2: NonCopy
    nc2 = nc1 // ERROR: cannot copy non-copyable type 'NonCopy'
    var nc3 = nc2 // ERROR: cannot copy non-copyable type 'NonCopy'
}
