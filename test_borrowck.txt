func main() {
    var x: &int // TODO: 'let' should be legal too
    let a = 42
    {
        let a = 4
        x = &a
    }
    *x // ERROR: 'a' does not live long enough
}

struct S {
    ptr: var &int
}

func f(ptr: &int) {
}

func fs(s: S) {
}

func multiple_borrows() {
    let a = 42
    {
        let x = &a
        let y = &a // ERROR: cannot borrow 'a' more than once
    }
    {
        // previous borrow should be dropped
        let x = &a
    }
    {
        let x = &a
        &a // ERROR: cannot borrow 'a' more than once
        S {.ptr = var &a} // ERROR: cannot borrow 'a' more than once
    }
    {
        let s1 = S {.ptr = var &a}
        // copy makes a new borrow
        let s2 = s1 // ERROR: cannot copy
    }
    {
        let x = &a
        f(&a) // ERROR: cannot borrow 'a' more than once
    }
    {
        let x = &a
        fs(S{.ptr = var &a}) // ERROR: cannot borrow 'a' more than once
        // fs(&S{.ptr = var &a}) // TODO: type check error
    }
}

func stack_ref() -> &int {
    let x = 3
    return &x // ERROR: TODO: lifetime error
}
