// -*- swift -*-

struct S {
    ptr: var &int
    ip: &int
}

func lifetime() {
    var x: &int
    let a = 42 // to confuse things even more...
    {
        let a = 4
        x = &a
    }
    x // ERROR: 'a' does not live long enough

    var y: &int
    {
        let a = 4
        let s = S {.ip = &a}
        y = s.ip
    }
    y // ERROR: 'a' does not live long enough

    struct Val {
        a: int
    }

    var z: &int
    {
        var v = Val {.a = 3}
        z = &v.a
    }
    z // ERROR: 'v' does not live long enough
}

func move() {
    struct Copyable {
        m: int
    }

    var x: &int
    var c_out: Copyable
    {
        let c = Copyable {.m = 3}
        c_out <- c
        c // ERROR: use of moved value
        c.m // ERROR: use of moved value
    }

    {
        let c = Copyable {.m = 3}
        let p = &c
        let c2 = *p // ERROR: cannot move out of '\*p' because it will invalidate 'p'

        struct CC {
            m: Copyable
        }

        let cc = CC {.m = c}
        let ccp = &cc
        let cc2 = (*ccp).m // ERROR: cannot move out of '\(\*ccp\).m' because it will invalidate 'ccp'
        var copy_is_ok: Copyable
        copy_is_ok = (*ccp).m
    }
    
    {
        let c = Copyable {.m = 3}
        let p = &c
        c_out <- c // ERROR: cannot move out of 'c' because it is borrowed
    }

    // Built-in types should be exempt.
    {
        let a = 42
        let b = a
        a
    }
}

func missing_annot_ret(ptr: &.a int) -> &int { // ERROR: missing lifetime annotation
    return ptr
}

func unknown_annot_ret(ptr: &.a int) -> &.z int { // ERROR: unknown lifetime annotation 'z'
    return ptr
}

func return_ref(ptr: &.a int) -> &.a int {
    return ptr // ok

    let i = 42
    return &i // ERROR: cannot return value that references local variable 'i'
}

func max(a: &.a int, b: &.a int) -> &.a int {
  if *a > *b {
    return a
  } else {
    return b
  }
}

func select_first(a: &.a int, b: &.b int) -> &.a int {
    return b // ERROR: lifetime mismatch

    // return max(a, a) // ERROR: lifetime mismatch
}

func fs(s: S) {
}

func multiple_borrows() {
    var a = 42
    {
        let x = &a
        let y = &a // ok
    }
    {
        let x = var &a // ok, previous borrow should be dropped
        let y = &a // ERROR: cannot borrow 'a' as immutable because .* mutable
    }
    {
        let x = &a

        // TODO: This gets parsed as a decl!!!
        var &a // ERROR: cannot borrow 'a' as mutable because .* immutable

        S {.ptr = var &a} // ERROR: cannot borrow 'a' as mutable because .* immutable
    }
    {
        let s1 = S {.ptr = var &a}
        // copy makes a new borrow
        // Note: this is caught in the type check phase.
        // let s2 = s1
    }
    {
        let x = &a
        return_ref(&a)
    }
    {
        let x = &a
        fs(S{.ptr = var &a}) // ERROR: cannot borrow 'a' as mutable because .* immutable
    }
}

struct StackRef {
    a: int
}

func stack_ref() -> &int {
    let empty_ref: &int
    // This should be caught in the typecheck phase, as a 'use before
    // initialization' error.
    return empty_ref // ERROR: TODO: null lifetime

    let x = 3
    return &x // ERROR: cannot return value that references local variable 'x'

    let s = StackRef {.a = 3}
    {
        return &s.a // ERROR: cannot return value that references local variable 's.a'
    }
    {
        // indirect reference to a stack variable
        let p = &s.a
        return p // ERROR: cannot return value that references local variable 's'
    }
    // TODO: return S {.a = &a}
}

func lifetime_transfer() {
    let a = 1
    var ptr: &int

    {
        var b = 2

        ptr = select_first(&b, &a)
        ptr = select_first(select_first(&b, &a), &a)

        let pb = var &b // ERROR: cannot borrow 'b' as mutable because .* immutable
        // TODO: cannot move out of 'b' because ...
    }

    *ptr // ERROR: 'b' does not live long enough
}

func lifetime_coercion() {
    // TODO.

    // let ptr = max(&a, &b)
    // In this case, from which one does 'ptr' borrow? Both?
    // Should we mark both 'a' and 'b' as borrowed then?
    //
    // What error should this emit?:
    // max(max(&a, &b), &b)

    let a = 1
    var ptr: &int

    {
        var b = 2

        ptr = max(&a, &b)

        // let pb = var &b // ERROR: cannot borrow 'b' as mutable because .* immutable
    }

    *ptr // ERROR: 'b' does not live long enough

}
